-- Create tables for the application

-- Users table
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL, -- In a production app, you should hash passwords
  apartment TEXT NOT NULL,
  role TEXT NOT NULL DEFAULT 'user',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Posts table
CREATE TABLE IF NOT EXISTS posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  type TEXT NOT NULL,
  description TEXT NOT NULL,
  price TEXT,
  time TEXT,
  status TEXT NOT NULL DEFAULT 'Available',
  posted_by TEXT NOT NULL REFERENCES users(username) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  thumbs_up INTEGER DEFAULT 0,
  thumbs_up_by TEXT[] DEFAULT '{}',
  comments JSONB DEFAULT '[]',
  tag TEXT DEFAULT 'general'
);

-- Temporarily disable RLS for initial data insertion
ALTER TABLE users DISABLE ROW LEVEL SECURITY;
ALTER TABLE posts DISABLE ROW LEVEL SECURITY;

-- Insert initial data

-- Admin user
INSERT INTO users (username, password, apartment, role)
VALUES ('admin', 'admin123', '1A', 'admin')
ON CONFLICT (username) DO NOTHING;

-- Sample users
INSERT INTO users (username, password, apartment, role)
VALUES 
  ('maria4b', 'password123', '4B', 'user'),
  ('john12a', 'password123', '12A', 'user')
ON CONFLICT (username) DO NOTHING;

-- Sample posts
INSERT INTO posts (title, type, description, price, status, posted_by, created_at, thumbs_up, thumbs_up_by, comments, tag)
VALUES (
  'Selling Chair - $10',
  'For Sale',
  'Comfortable wooden chair, barely used',
  '10',
  'Available',
  'maria4b',
  NOW() - INTERVAL '1 hour',
  3,
  ARRAY['admin', 'john12a', 'user123'],
  format('[{"id": 1, "text": "Is this still available?", "posted_by": "john12a", "created_at": "%s"}]', (NOW() - INTERVAL '30 minutes')::TEXT)::JSONB,
  'goods'
)
ON CONFLICT DO NOTHING;

INSERT INTO posts (title, type, description, time, status, posted_by, created_at, thumbs_up, thumbs_up_by, comments, tag)
VALUES (
  'Ride to city - 6 PM',
  'Service',
  'Going downtown, can take 2 people',
  '6 PM',
  'Available',
  'john12a',
  NOW() - INTERVAL '2 hours',
  1,
  ARRAY['maria4b'],
  '[]'::JSONB,
  'services'
)
ON CONFLICT DO NOTHING;

INSERT INTO posts (title, type, description, price, status, posted_by, created_at, thumbs_up, thumbs_up_by, comments, tag)
VALUES (
  'Old Lamp - $5',
  'For Sale',
  'Working desk lamp',
  '5',
  'Available',
  'admin',
  NOW() - INTERVAL '1 day',
  0,
  '{}',
  '[]'::JSONB,
  'goods'
)
ON CONFLICT DO NOTHING;

-- Create Row Level Security (RLS) policies

-- Enable RLS on tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;

-- Create policies for users table
CREATE POLICY users_select_policy ON users
  FOR SELECT USING (true); -- Anyone can view users

CREATE POLICY users_insert_policy ON users
  FOR INSERT WITH CHECK (true); -- Anyone can create a user

CREATE POLICY users_update_policy ON users
  FOR UPDATE USING (auth.uid() = id OR 
                   EXISTS (SELECT 1 FROM users WHERE username = auth.uid()::text AND role = 'admin'));

-- Create policies for posts table
CREATE POLICY posts_select_policy ON posts
  FOR SELECT USING (true); -- Anyone can view posts

CREATE POLICY posts_insert_policy ON posts
  FOR INSERT WITH CHECK (true); -- Temporarily allow any inserts

CREATE POLICY posts_update_policy ON posts
  FOR UPDATE USING (true); -- Temporarily allow any updates

CREATE POLICY posts_delete_policy ON posts
  FOR DELETE USING (true); -- Temporarily allow any deletes

-- Note: In a production environment, you should replace the above policies with:
-- CREATE POLICY posts_insert_policy ON posts
--   FOR INSERT WITH CHECK (auth.uid()::text = posted_by);
-- 
-- CREATE POLICY posts_update_policy ON posts
--   FOR UPDATE USING (auth.uid()::text = posted_by OR 
--                    EXISTS (SELECT 1 FROM users WHERE username = auth.uid()::text AND role = 'admin'));
-- 
-- CREATE POLICY posts_delete_policy ON posts
--   FOR DELETE USING (auth.uid()::text = posted_by OR 
--                    EXISTS (SELECT 1 FROM users WHERE username = auth.uid()::text AND role = 'admin')); 